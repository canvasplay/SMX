{"version":3,"sources":["../src/smx.js"],"names":["global","smx","version","AttributeParsers","NodeParsers","$smx","__node_wrapper","apply","arguments","cache","elems","create_node","xmlNode","id","getAttribute","e","node","Node","_","isArray","isUndefined","length","nodeType","result","i","push","window"],"mappings":";;AAAA,CAAC,UAASA,MAAT,EAAgB;;AAEf;;;;AAID,gBAAIC,MAAM,EAAV;;AAGC;;;;;AAKDA,gBAAIC,OAAJ,GAAc,QAAd;;AAGC;;;;;;;AAOAD,gBAAIE,gBAAJ,GAAuB,EAAvB;;AAGA;;;;;;;AAOAF,gBAAIG,WAAJ,GAAkB,EAAlB;;AAKA,gBAAIC,OAAOL,OAAO,MAAP,IAAiB,YAAU;AACpC,+BAAOM,eAAeC,KAAf,CAAqBF,IAArB,EAA2BG,SAA3B,CAAP;AACD,aAFD;;AAIA;;;;;;AAMC;;;;;;;;AAQCH,iBAAKI,KAAL,GAAa,EAAb;;AAGD;;;;;AAKC,gBAAIH,iBAAiB,SAAjBA,cAAiB,CAAUI,KAAV,EAAiB;;AAIlC,4BAAIC,cAAc,SAAdA,WAAc,CAAUC,OAAV,EAAmB;;AAEjC,wCAAIC,KAAK,IAAT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wCAAI;AACAA,qDAAKD,QAAQE,YAAR,CAAqB,IAArB,CAAL;AACH,qCAFD,CAEE,OAAOC,CAAP,EAAU,CAAE;;AAEd;AACA,wCAAI,CAACF,EAAL,EAAS;;AAET;AACA;AACA,wCAAIR,KAAKI,KAAL,CAAWI,EAAX,CAAJ,EAAoB,OAAOR,KAAKI,KAAL,CAAWI,EAAX,CAAP;;AAEpB;AACA,wCAAIG,OAAO,IAAIf,IAAIgB,IAAR,CAAaL,OAAb,CAAX;;AAEA;AACAP,yCAAKI,KAAL,CAAWI,EAAX,IAAiBG,IAAjB;;AAEA;AACA,2CAAOA,IAAP;AAEH,yBA9BD;;AAmCA,4BAAIN,UAAUQ,EAAEC,OAAF,CAAUT,KAAV,KAAoB,CAACQ,EAAEE,WAAF,CAAcV,MAAMW,MAApB,CAA/B,KAA+DH,EAAEE,WAAF,CAAcV,MAAMY,QAApB,CAAnE,EAAkG;AAC9F,wCAAIC,SAAS,EAAb;AACA,yCAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAId,MAAMW,MAA1B,EAAkCG,GAAlC,EAAuC;AACnC,oDAAId,MAAMc,CAAN,CAAJ,EAAc;AACV,gEAAIR,OAAQN,MAAMc,CAAN,EAAS,CAAT,CAAD,GAAgBd,MAAMc,CAAN,CAAhB,GAA2Bb,YAAYD,MAAMc,CAAN,CAAZ,CAAtC;AACA,gEAAIR,IAAJ,EAAUO,OAAOE,IAAP,CAAYT,IAAZ;AACb;AACJ;AACD,2CAAOO,MAAP;AACH,yBATD,MASO,IAAIb,KAAJ,EAAW;AACd,wCAAIA,MAAM,CAAN,CAAJ,EAAc,OAAOA,KAAP,CAAd,KACK,OAAOC,YAAYD,KAAZ,CAAP;AACR,yBAHM,MAGA;AAEV,aArDD;;AAyDH;AACAV,mBAAOC,GAAP,GAAaA,GAAb;AACAD,mBAAOK,IAAP,GAAcA,IAAd;AAGA,CA/HD,EA+HGqB,MA/HH","file":"smx.js","sourcesContent":["(function(global){\r\n\r\n  /**\r\n  *\tGlobal namespace to hold all framework classes and modules.\r\n  *\t@namespace smx\r\n  */\r\n\tvar smx = {};\r\n\t\r\n\t\r\n  /**\r\n   * Gets current framework version\r\n   * @memberof smx\r\n   * @type {String}\r\n   */\r\n\tsmx.version = '0.8.14';\r\n  \r\n  \r\n  /**\r\n   * This namescape is a placeholder for custom attribute parsers.\r\n   * Attribute parsers are used during XML transpilation to process original\r\n   * nodes attributes in different ways.\r\n   * @namespace AttributeParsers\r\n   * @memberof smx\r\n   */\r\n  smx.AttributeParsers = {};\r\n\r\n\r\n  /**\r\n   * This namescape is a placeholder for custom node parsers.\r\n   * Tag parsers are used during XML transpilation to transform original nodes\r\n   * in different ways.\r\n   * @namespace NodeParsers\r\n   * @memberof smx\r\n   */\r\n  smx.NodeParsers = {};\r\n\r\n\r\n\r\n\r\n  var $smx = global['$smx'] = function(){\r\n    return __node_wrapper.apply($smx, arguments);\r\n  };\r\n  \r\n  /**\r\n   * Global runtime namespace.\r\n   * @name $smx\r\n   * @type {Object}\r\n   */\r\n\r\n   /**\r\n    * Runtime nodes cache. Contains an id key map of all processed nodes for\r\n    * easy acccess.\r\n    * @global\r\n    * @memberof $smx\r\n    * @type {Object}\r\n    * @name cache\r\n    */\r\n    $smx.cache = {};\r\n\r\n\r\n   /**\r\n    * Global node wrapper.\r\n    * @method $smx\r\n    * @return {Node|Nodes[]}\r\n    */\r\n    var __node_wrapper = function (elems) {\r\n\r\n\r\n\r\n        var create_node = function (xmlNode) {\r\n\r\n            var id = null;\r\n\r\n            //if(!xmlNode) return;\r\n            //if (xmlNode.nodeName == 'undefined') return;\r\n            //if (typeof xmlNode.nodeType == 'undefined') return;\r\n            //if (xmlNode.nodeType != 1) return;\r\n\r\n            //can this try replace the 4 conditionals above? yes...\r\n            try {\r\n                id = xmlNode.getAttribute('id')\r\n            } catch (e) {}\r\n\r\n            //id attr is required!\r\n            if (!id) return;\r\n\r\n            //Does already exists a node with this id?\r\n            //prevent duplicated nodes and return existing one\r\n            if ($smx.cache[id]) return $smx.cache[id];\r\n\r\n            //create new Node from given XMLNode\r\n            var node = new smx.Node(xmlNode);\r\n\r\n            //add it to nodes cache\r\n            $smx.cache[id] = node;\r\n\r\n            //return just created node\r\n            return node;\r\n\r\n        };\r\n\r\n\r\n\r\n\r\n        if (elems && (_.isArray(elems) || !_.isUndefined(elems.length)) && _.isUndefined(elems.nodeType)) {\r\n            var result = [];\r\n            for (var i = 0; i < elems.length; i++) {\r\n                if (elems[i]) {\r\n                    var node = (elems[i][0]) ? elems[i] : create_node(elems[i]);\r\n                    if (node) result.push(node);\r\n                }\r\n            }\r\n            return result;\r\n        } else if (elems) {\r\n            if (elems[0]) return elems;\r\n            else return create_node(elems);\r\n        } else return;\r\n\r\n    };\r\n\r\n\r\n\r\n\t//expose globals\r\n\tglobal.smx = smx;\r\n\tglobal.$smx = $smx;\r\n\r\n\r\n})(window);\r\n\r\n\r\n\t"]}